version: '3.8'

services:
  postgres:
    image: postgres:16
    volumes:
      - postgres-data:/var/lib/postgresql/data  # Persist database data
    networks:
      - app-network
    ports:
      - "5432:5432"
    env_file:
      - .env.production

  backend:
    build:
      context: .
      dockerfile: Dockerfile
      target: backend
    volumes:
      - ./server:/app
      - /mnt/share-data/photoaura:/var/aura/data  # Adding a named volume for data persistence
    depends_on:
      - postgres  # Ensure the backend waits for PostgreSQL to be ready
    networks:
      - app-network
    command: uvicorn main:app --host 0.0.0.0 --reload --port 8000  # or any other command to start your FastAPI backend
    env_file:
      - .env.production

  frontend:
    build:
      context: .
      dockerfile: Dockerfile
      target: frontend
    volumes:
      - /app/client/node_modules # Consider only mounting node_modules or specific directories if necessary
    networks:
      - app-network
    command: pnpm run start  # or any other command to start your Next.js frontend
    env_file:
      - .env.production
  nginx:
    image: nginx:alpine
    volumes:
      - ./nginx/nginx.conf.template:/etc/nginx/nginx.conf.template:ro
      - cert-data:/etc/letsencrypt:ro
      - webroot-data:/var/www/certbot
      - ./nginx/entrypoint.sh:/entrypoint.sh
    ports:
      - "80:80"
      - "443:443"
    entrypoint: ["/entrypoint.sh"]
    env_file:
      - .env.production
    depends_on:
      - frontend
      - backend
    networks:
      - app-network

  certbot:
    image: certbot/certbot
    volumes:
      - cert-data:/etc/letsencrypt
      - webroot-data:/var/www/certbot
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"
    env_file:
      - .env.production
    command: >
      certonly --agree-tos --email ${EMAIL} -d ${DOMAINS}
      --non-interactive --webroot --webroot-path=/var/www/certbot
      --keep-until-expiring

networks:
  app-network:
    driver: bridge

volumes:
  aura-data:
    driver: local
  postgres-data:
    driver: local
  cert-data:
    driver: local
  webroot-data:
    driver: local
